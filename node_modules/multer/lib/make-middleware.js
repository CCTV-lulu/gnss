var is = require('type-is')
var Busboy = require('busboy')
var extend = require('xtend')
var onFinished = require('on-finished')
var appendField = require('append-field')

var Counter = require('./counter')
var makeError = require('./make-error')
var FileAppender = require('./file-appender')
var removeUploadedFiles = require('./remove-uploaded-files')

function drainStream (stream) {
  stream.on('readable', stream.read.bind(stream))
}

function makeMiddleware (setup) {
  return function multerMiddleware (req, res, next) {
    if (!is(req, ['multipart'])) return next()
    console.log('-----------options')
    var options = setup()
    console.log(options)

    var limits = options.limits
    var storage = options.storage
    var fileFilter = options.fileFilter
    var fileStrategy = options.fileStrategy
    var preservePath = options.preservePath

    req.body = Object.create(null)

    var busboy

    try {
      console.log('------------------------------try busboy---')
      busboy = new Busboy({ headers: req.headers, limits: limits, preservePath: preservePath })
      console.log('------------------------------end busboy---')
    } catch (err) {
      console.log('-------------------------err')
        console.log(err)
      return next(err)
    }

    console.log('-----------------------------------appender')
    var appender = new FileAppender(fileStrategy, req)
    console.log('-----------------------------------appender ---------------------end')
      var isDone = false
    var readFinished = false
    var errorOccured = false
      console.log('-----------------------counter')
    var pendingWrites = new Counter()
      console.log('-----------------------counter --------------------end')

    var uploadedFiles = []

    function done (err) {
      console.log("------------------done---------")
      if (isDone) return
      isDone = true
      console.log("--------------unpipe-------")
      req.unpipe(busboy)
      console.log("--------------unpipe-----------end")
      drainStream(req)
      console.log("--------------removeAllListeners---------")
      busboy.removeAllListeners()
      console.log("-----------------removeAllListeners------------------end-")
      onFinished(req, function () { next(err) })
      console.log("-----------onFinished--------------")
    }

    function indicateDone () {
      console.log("-----------readFinished-------------")
      if (readFinished && pendingWrites.isZero() && !errorOccured) done()
      console.log("------------------readFinished------------------end")
    }

    function abortWithError (uploadError) {
      console.log("-------------errorOccured-------------------")
      if (errorOccured) return
      errorOccured = true
      console.log("-------------errorOccured-------------------end----")
      pendingWrites.onceZero(function () {
        console.log("---------onceZero-----------")
        function remove (file, cb) {
          console.log("------storage--------------")
          storage._removeFile(req, file, cb)
            console.log("------storage-----------------end-")
        }

        removeUploadedFiles(uploadedFiles, remove, function (err, storageErrors) {
          console.log("-------removeUploadedFiles------------")
          if (err) return done(err)
          console.log("-------removeUploadedFiles------------end")
          uploadError.storageErrors = storageErrors
          done(uploadError)
        })
      })
    }

    function abortWithCode (code, optionalField) {
      console.log("------------abortWithCode--------------------")
      abortWithError(makeError(code, optionalField))
      console.log("------------abortWithCode--------------------end")
    }

    // handle text field data
    busboy.on('field', function (fieldname, value, fieldnameTruncated, valueTruncated) {
      console.log("---------------fieldnameTruncated---------------")
      if (fieldnameTruncated) return abortWithCode('LIMIT_FIELD_KEY')
      console.log("---------------fieldnameTruncated--------------end------valueTruncated-")
      if (valueTruncated) return abortWithCode('LIMIT_FIELD_VALUE', fieldname)
      console.log("-----------------valueTruncated----------------end")
      // Work around bug in Busboy (https://github.com/mscdex/busboy/issues/6)
      if (limits && limits.hasOwnProperty('fieldNameSize')) {
        console.log("-------------fieldname.length -------------------")
        if (fieldname.length > limits.fieldNameSize) return abortWithCode('LIMIT_FIELD_KEY')
          console.log("-----------------fieldname.length -------------------end--")
      }
      console.log("-------------appendField-------------------")
      appendField(req.body, fieldname, value)
      console.log("--------------appendField-----------------end-")
    })

    // handle files
    busboy.on('file', function (fieldname, fileStream, filename, encoding, mimetype) {
      // don't attach to the files object, if there is no file
        console.log("---------------!filename-----------------")
      if (!filename) return fileStream.resume()
        console.log("----------------!filename---------------end")
      // Work around bug in Busboy (https://github.com/mscdex/busboy/issues/6)
      if (limits && limits.hasOwnProperty('fieldNameSize')) {
          console.log("-------------fieldNameSize------------------------")
        if (fieldname.length > limits.fieldNameSize) return abortWithCode('LIMIT_FIELD_KEY')
          console.log("-------------fieldNameSize-------------------------end")
      }

      var file = {
        fieldname: fieldname,
        originalname: filename,
        encoding: encoding,
        mimetype: mimetype
      }
      console.log("-----------placeholder------------")
      var placeholder = appender.insertPlaceholder(file)
      console.log("------------placeholder---------------------end")
      fileFilter(req, file, function (err, includeFile) {
        if (err) {
          console.log("-----err--------------")
          appender.removePlaceholder(placeholder)
          console.log("---------appender---------------end-")
          return abortWithError(err)
          console.log("----------return----------------------")
        }

        if (!includeFile) {
          console.log("--------------------includeFile")
          appender.removePlaceholder(placeholder)
          console.log("-------------------------includeFile-----------end")
          return fileStream.resume()
        }

        var aborting = false
          console.log("------------pendingWrites---------")
        pendingWrites.increment()
          console.log("------------pendingWrites-----------------end-")
        Object.defineProperty(file, 'stream', {
          configurable: true,
          enumerable: false,
          value: fileStream
        })

        fileStream.on('error', function (err) {
          console.log("----------------decrement-----")
          pendingWrites.decrement()
          console.log("-----------------decrement----------------end")
          abortWithError(err)
          console.log("------------------abortWithError---------")
        })

        fileStream.on('limit', function () {
          aborting = true
            console.log("------------abortWithCode----------")
          abortWithCode('LIMIT_FILE_SIZE', fieldname)
            console.log("------------abortWithCode---------end-")
        })

        storage._handleFile(req, file, function (err, info) {
          console.log("----------storage._handleFile--------------")
          if (aborting) {
            console.log("------------------------placeholder----------")
            appender.removePlaceholder(placeholder)
            console.log("------------------placeholder----------end")
            uploadedFiles.push(extend(file, info))
            console.log("---------------$uploadedFiles---------------------")  
            return pendingWrites.decrement()
          }

          if (err) {
            console.log("-------------------err")
            console.log(err)  
            console.log("--------------$removePlaceholder-------")  
            appender.removePlaceholder(placeholder)
            console.log("----------------$removePlaceholder----------end")
              console.log("-------------pendingWrites-------------------")
            pendingWrites.decrement()
              console.log("----------------pendingWrites---------------------------end")
            return abortWithError(err)
          }
          console.log("---------------------------------$fileInfo")
          var fileInfo = extend(file, info)
          console.log("-------------------------$fileInfo-------------end")
          appender.replacePlaceholder(placeholder, fileInfo)
          uploadedFiles.push(fileInfo)
          pendingWrites.decrement()
          indicateDone()
        })
      })
    })
    console.log("------------error--------------------")
    busboy.on('error', function (err) { abortWithError(err) })
    console.log("-------------error-----------------------end") 
    console.log("--------------partsLimit------------------------------")  
    busboy.on('partsLimit', function () { abortWithCode('LIMIT_PART_COUNT') })
    console.log("--------------partsLimit------------------------------end") 
    console.log("--------------filesLimit------------------------------")   
    busboy.on('filesLimit', function () { abortWithCode('LIMIT_FILE_COUNT') })
    console.log("--------------filesLimit------------------------------end")
    busboy.on('fieldsLimit', function () { abortWithCode('LIMIT_FIELD_COUNT') })
    console.log("--------------------finish-------------------------------------")   
    busboy.on('finish', function () {
    console.log("--------------------finish------------------------------------end-")   
      readFinished = true
      indicateDone()
    })

    req.pipe(busboy)
  }
}

module.exports = makeMiddleware
